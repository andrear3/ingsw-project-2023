
> test
> mocha './mocha-testing/**/*.spec.mjs'

1277


Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='Utentes';
  gestisciAstaInversa Test
Executing (default): SELECT `astaID`, `nomeBeneInVendita`, `titolo`, `categoria`, `tipoBeneInVendita`, `descrizioneAsta`, `prezzofinale`, `prezzoiniziale`, `dataFineAsta`, `statusAsta`, `url`, `createdAt`, `updatedAt`, `UtenteNickname` FROM `Asta` AS `Asta` WHERE `Asta`.`astaID` = 60;
Executing (default): PRAGMA INDEX_LIST(`Utentes`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_Utentes_1`)
Executing (default): SELECT `nickname`, `nome`, `cognome`, `email`, `tipo`, `regione`, `indirizzo`, `url`, `saldo`, `descrizione`, `link1`, `link2`, `link3`, `password`, `createdAt`, `updatedAt` FROM `Utentes` AS `Utente` WHERE `Utente`.`nickname` = 'TestUtente';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='Asta';
Executing (default): PRAGMA INDEX_LIST(`Asta`)
Executing (default): INSERT INTO `Offerta` (`id`,`valore`,`createdAt`,`updatedAt`,`UtenteNickname`,`AstumAstaID`) VALUES (NULL,$1,$2,$3,$4,$5);
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='AstaInversas';
Offerta salvata nel database.
Prezzo iniziale: 100, Offerta: 35
    ✔ test1 parametri corretti  (62ms)

  gestisciAstaInversa Test
Executing (default): PRAGMA INDEX_LIST(`AstaInversas`)
Executing (default): SELECT `astaID`, `nomeBeneInVendita`, `titolo`, `categoria`, `tipoBeneInVendita`, `descrizioneAsta`, `prezzofinale`, `prezzoiniziale`, `dataFineAsta`, `statusAsta`, `url`, `createdAt`, `updatedAt`, `UtenteNickname` FROM `Asta` AS `Asta` WHERE `Asta`.`astaID` = 60;
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='AstaAlRibassos';
Executing (default): PRAGMA INDEX_LIST(`AstaAlRibassos`)
Executing (default): SELECT `nickname`, `nome`, `cognome`, `email`, `tipo`, `regione`, `indirizzo`, `url`, `saldo`, `descrizione`, `link1`, `link2`, `link3`, `password`, `createdAt`, `updatedAt` FROM `Utentes` AS `Utente` WHERE `Utente`.`nickname` = 'TestUtente';
Executing (default): SELECT name FROM sqlite_master WHERE type='table' AND name='Offerta';
Executing (default): PRAGMA INDEX_LIST(`Offerta`)
Executing (default): INSERT INTO `Offerta` (`id`,`valore`,`createdAt`,`updatedAt`,`UtenteNickname`,`AstumAstaID`) VALUES (NULL,$1,$2,$3,$4,$5);
Database synced correctly
Offerta salvata nel database.
Prezzo iniziale: 100, Offerta: 96
    ✔ test2 offerta maggiore

  gestisciAstaInversa Test
Executing (default): SELECT `id`, `createdAt`, `updatedAt`, `AstumAstaID` FROM `AstaInversas` AS `AstaInversa`;
Executing (default): SELECT `astaID`, `nomeBeneInVendita`, `titolo`, `categoria`, `tipoBeneInVendita`, `descrizioneAsta`, `prezzofinale`, `prezzoiniziale`, `dataFineAsta`, `statusAsta`, `url`, `createdAt`, `updatedAt`, `UtenteNickname` FROM `Asta` AS `Asta` WHERE `Asta`.`astaID` = 60 AND `Asta`.`statusAsta` = 'inVendita';
60 asta in vendita
60 asta scaduta
Executing (default): SELECT MIN(`valore`) AS `offertaMin`, `UtenteNickname` FROM `Offerta` AS `Offerta` WHERE `Offerta`.`AstumAstaID` = 60 GROUP BY `UtenteNickname` LIMIT 1;
Executing (default): SELECT `nickname`, `nome`, `cognome`, `email`, `tipo`, `regione`, `indirizzo`, `url`, `saldo`, `descrizione`, `link1`, `link2`, `link3`, `password`, `createdAt`, `updatedAt` FROM `Utentes` AS `Utente` WHERE `Utente`.`nickname` IS NULL LIMIT 1;
    ✔ test3 utente null

  gestisciAstaInversa Test
Executing (default): SELECT `astaID`, `nomeBeneInVendita`, `titolo`, `categoria`, `tipoBeneInVendita`, `descrizioneAsta`, `prezzofinale`, `prezzoiniziale`, `dataFineAsta`, `statusAsta`, `url`, `createdAt`, `updatedAt`, `UtenteNickname` FROM `Asta` AS `Asta` WHERE `Asta`.`astaID` = 2;
Asta non trovata.
    ✔ test4 astaId inesistente

  creOfferta Test
Executing (default): SELECT `astaID`, `nomeBeneInVendita`, `titolo`, `categoria`, `tipoBeneInVendita`, `descrizioneAsta`, `prezzofinale`, `prezzoiniziale`, `dataFineAsta`, `statusAsta`, `url`, `createdAt`, `updatedAt`, `UtenteNickname` FROM `Asta` AS `Asta` WHERE `Asta`.`astaID` = 50;
Executing (default): SELECT `nickname`, `nome`, `cognome`, `email`, `tipo`, `regione`, `indirizzo`, `url`, `saldo`, `descrizione`, `link1`, `link2`, `link3`, `password`, `createdAt`, `updatedAt` FROM `Utentes` AS `Utente` WHERE `Utente`.`nickname` = 'TestUtente';
Executing (default): INSERT INTO `Offerta` (`id`,`valore`,`createdAt`,`updatedAt`,`UtenteNickname`,`AstumAstaID`) VALUES (NULL,$1,$2,$3,$4,$5);
Offerta salvata nel database.
Prezzo iniziale: 100, Offerta: 103
Executing (default): SELECT `id`, `valore`, `createdAt`, `updatedAt`, `UtenteNickname`, `AstumAstaID` FROM `Offerta` AS `Offerta` WHERE `Offerta`.`valore` = '103' AND `Offerta`.`UtenteNickname` = 'TestUtente' LIMIT 1;
    ✔ test5 parametri corretti 

  creaOfferta Test
Executing (default): SELECT `astaID`, `nomeBeneInVendita`, `titolo`, `categoria`, `tipoBeneInVendita`, `descrizioneAsta`, `prezzofinale`, `prezzoiniziale`, `dataFineAsta`, `statusAsta`, `url`, `createdAt`, `updatedAt`, `UtenteNickname` FROM `Asta` AS `Asta` WHERE `Asta`.`astaID` = 3;
Asta non trovata.
    ✔ test6 astaId inesistente

  creaOfferta Test
Executing (default): SELECT `astaID`, `nomeBeneInVendita`, `titolo`, `categoria`, `tipoBeneInVendita`, `descrizioneAsta`, `prezzofinale`, `prezzoiniziale`, `dataFineAsta`, `statusAsta`, `url`, `createdAt`, `updatedAt`, `UtenteNickname` FROM `Asta` AS `Asta` WHERE `Asta`.`astaID` = 50;
Executing (default): SELECT `nickname`, `nome`, `cognome`, `email`, `tipo`, `regione`, `indirizzo`, `url`, `saldo`, `descrizione`, `link1`, `link2`, `link3`, `password`, `createdAt`, `updatedAt` FROM `Utentes` AS `Utente` WHERE `Utente`.`nickname` = 'TestUtente';
Saldo insufficiente per l'offerta.
Saldo disponibile: 1200, Offerta: 1400
    ✔ test7 saldo insufficiente

  creaOfferta Test
Executing (default): SELECT `astaID`, `nomeBeneInVendita`, `titolo`, `categoria`, `tipoBeneInVendita`, `descrizioneAsta`, `prezzofinale`, `prezzoiniziale`, `dataFineAsta`, `statusAsta`, `url`, `createdAt`, `updatedAt`, `UtenteNickname` FROM `Asta` AS `Asta` WHERE `Asta`.`astaID` = 50;
Executing (default): SELECT `nickname`, `nome`, `cognome`, `email`, `tipo`, `regione`, `indirizzo`, `url`, `saldo`, `descrizione`, `link1`, `link2`, `link3`, `password`, `createdAt`, `updatedAt` FROM `Utentes` AS `Utente` WHERE `Utente`.`nickname` = 'TestUtente102';
Utente non trovato.
    ✔ test8 utente non trovato

  setTipoUtenete Test
Executing (default): UPDATE `Utentes` SET `tipo`=$1,`updatedAt`=$2 WHERE `email` = $3
Successo! Tipo cambiato
    ✔ test9 parametri corretti 
    ✔ test10 parametro tipo incorretto 
Executing (default): UPDATE `Utentes` SET `tipo`=$1,`updatedAt`=$2 WHERE `email` = $3
    ✔ test11 paramtreo mail incorretto  

  Login API
Executing (default): SELECT `nickname`, `nome`, `cognome`, `email`, `tipo`, `regione`, `indirizzo`, `url`, `saldo`, `descrizione`, `link1`, `link2`, `link3`, `password`, `createdAt`, `updatedAt` FROM `Utentes` AS `Utente` WHERE `Utente`.`email` = 'TestUtenteHash@mail.it' LIMIT 1;
    ✔ test 12 credeziali corrette ritorna access token  (80ms)
Executing (default): SELECT `nickname`, `nome`, `cognome`, `email`, `tipo`, `regione`, `indirizzo`, `url`, `saldo`, `descrizione`, `link1`, `link2`, `link3`, `password`, `createdAt`, `updatedAt` FROM `Utentes` AS `Utente` WHERE `Utente`.`email` = 'TestUtenteHash@mail.it' LIMIT 1;
Login failed: Incorrect password
    ✔ test 13 password non corretta error code 401
Executing (default): SELECT `nickname`, `nome`, `cognome`, `email`, `tipo`, `regione`, `indirizzo`, `url`, `saldo`, `descrizione`, `link1`, `link2`, `link3`, `password`, `createdAt`, `updatedAt` FROM `Utentes` AS `Utente` WHERE `Utente`.`email` = 'TestUtenteHh@mail.it' LIMIT 1;
Login failed: User not found
    ✔ test 14 utente inesistente error code 401


  14 passing (278ms)

