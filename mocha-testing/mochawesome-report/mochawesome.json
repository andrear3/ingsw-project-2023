{
  "stats": {
    "suites": 10,
    "tests": 14,
    "passes": 9,
    "pending": 0,
    "failures": 5,
    "start": "2024-11-07T10:14:55.178Z",
    "end": "2024-11-07T10:14:55.406Z",
    "duration": 228,
    "testsRegistered": 14,
    "passPercent": 64.28571428571429,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "67ddfe7a-a25d-466d-8ab9-cecbacfbc3cc",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "55cd4b24-6811-483f-a3f2-722b05e6dc58",
          "title": "gestisciAstaInversa Test",
          "fullFile": "C:\\Users\\gaspa\\OneDrive\\Documenti\\GitHub\\ingsw-project-2023\\mocha-testing\\backendTest.spec.mjs",
          "file": "\\backendTest.spec.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "test1 parametri corretti ",
              "fullTitle": "gestisciAstaInversa Test test1 parametri corretti ",
              "timedOut": false,
              "duration": 28,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await AstaCTRL.gestisciAstaInversa(3,3,\"kikkowoman\");\n   \n      expect(result).to.be.true;",
              "err": {
                "message": "Error: Asta Inversa con ID 3 non trovata.",
                "estack": "Error: Asta Inversa con ID 3 non trovata.\n    at AstaCTRL.gestisciAstaInversa (file:///C:/Users/gaspa/OneDrive/Documenti/GitHub/ingsw-project-2023/backend/controllers/AstaCTRL.js:573:15)\n    at async Context.<anonymous> (file:///C:/Users/gaspa/OneDrive/Documenti/GitHub/ingsw-project-2023/mocha-testing/backendTest.spec.mjs:24:22)",
                "diff": null
              },
              "uuid": "2999d465-4aa6-4818-9318-68e41ec85cd8",
              "parentUUID": "55cd4b24-6811-483f-a3f2-722b05e6dc58",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "2999d465-4aa6-4818-9318-68e41ec85cd8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 28,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e0724a82-120c-4c02-a18c-ef05c995ecc8",
          "title": "gestisciAstaInversa Test",
          "fullFile": "C:\\Users\\gaspa\\OneDrive\\Documenti\\GitHub\\ingsw-project-2023\\mocha-testing\\backendTest.spec.mjs",
          "file": "\\backendTest.spec.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "test2 offerta maggiore",
              "fullTitle": "gestisciAstaInversa Test test2 offerta maggiore",
              "timedOut": false,
              "duration": 13,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await AstaCTRL.gestisciAstaInversa(60,130,\"TestUtente\")\n \n  .catch((error) => {\n    expect(error.message).to.equal(\"L'offerta deve essere inferiore all'offerta più bassa attuale.\")\n  });",
              "err": {
                "message": "AssertionError: expected 'Asta Inversa con ID 60 non trovata.' to equal 'L\\'offerta deve essere inferiore all\\…'",
                "estack": "AssertionError: expected 'Asta Inversa con ID 60 non trovata.' to equal 'L\\'offerta deve essere inferiore all\\…'\n    at file:///C:/Users/gaspa/OneDrive/Documenti/GitHub/ingsw-project-2023/mocha-testing/backendTest.spec.mjs:38:34\n    at async Context.<anonymous> (file:///C:/Users/gaspa/OneDrive/Documenti/GitHub/ingsw-project-2023/mocha-testing/backendTest.spec.mjs:35:5)",
                "diff": "- Asta Inversa con ID 60 non trovata.\n+ L'offerta deve essere inferiore all'offerta più bassa attuale.\n"
              },
              "uuid": "7244765e-f35b-4d76-a1e7-47e182004d4b",
              "parentUUID": "e0724a82-120c-4c02-a18c-ef05c995ecc8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7244765e-f35b-4d76-a1e7-47e182004d4b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "77afa073-bf2d-42e3-8bcf-0331e0f542fd",
          "title": "gestisciAstaInversa Test",
          "fullFile": "C:\\Users\\gaspa\\OneDrive\\Documenti\\GitHub\\ingsw-project-2023\\mocha-testing\\backendTest.spec.mjs",
          "file": "\\backendTest.spec.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "test3 utente null",
              "fullTitle": "gestisciAstaInversa Test test3 utente null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await AstaCTRL.gestisciAstaInversa(60,50,null)\n\n .catch((error) => {\n   expect(error.message).to.equal(\"Il parametro 'venditoreNickname' non può essere null, undefined o una stringa vuota.\")\n });",
              "err": {},
              "uuid": "759cf519-3ffc-4640-ab3c-0e9595c78f93",
              "parentUUID": "77afa073-bf2d-42e3-8bcf-0331e0f542fd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "759cf519-3ffc-4640-ab3c-0e9595c78f93"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "18478e78-83c0-4914-b1d7-cdf73e91600b",
          "title": "gestisciAstaInversa Test",
          "fullFile": "C:\\Users\\gaspa\\OneDrive\\Documenti\\GitHub\\ingsw-project-2023\\mocha-testing\\backendTest.spec.mjs",
          "file": "\\backendTest.spec.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "test4 astaId inesistente",
              "fullTitle": "gestisciAstaInversa Test test4 astaId inesistente",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await AstaCTRL.gestisciAstaInversa(2,49,'TestUtente')\n\n .catch((error) => {\n   expect(error.message).to.equal(`Asta Inversa con ID 2 non trovata.`)\n });",
              "err": {},
              "uuid": "1e993d37-78b3-49b4-86ed-67178d8e3a50",
              "parentUUID": "18478e78-83c0-4914-b1d7-cdf73e91600b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1e993d37-78b3-49b4-86ed-67178d8e3a50"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "587add2e-1294-40b2-a55d-155dfe4b89ac",
          "title": "creOfferta Test",
          "fullFile": "C:\\Users\\gaspa\\OneDrive\\Documenti\\GitHub\\ingsw-project-2023\\mocha-testing\\backendTest.spec.mjs",
          "file": "\\backendTest.spec.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "test1 parametri corretti ",
              "fullTitle": "creOfferta Test test1 parametri corretti ",
              "timedOut": false,
              "duration": 11,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await OffertaCTRL.creaOfferta(103,\"TestUtente\",50);\n   \n      \n      const offerta = await Offerta.findOne({ where: { valore: 103, UtenteNickname: \"TestUtente\" } });\n      expect(offerta).to.not.be.null;\n      expect(offerta.valore).to.equal(103);\n      expect(offerta.UtenteNickname).to.equal(\"TestUtente\");",
              "err": {
                "message": "AssertionError: expected null not to be null",
                "estack": "AssertionError: expected null not to be null\n    at Context.<anonymous> (file:///C:/Users/gaspa/OneDrive/Documenti/GitHub/ingsw-project-2023/mocha-testing/backendTest.spec.mjs:68:32)",
                "diff": null
              },
              "uuid": "b1f083e3-0e0f-4eef-8222-3f4dfe3dc63a",
              "parentUUID": "587add2e-1294-40b2-a55d-155dfe4b89ac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b1f083e3-0e0f-4eef-8222-3f4dfe3dc63a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9d2ea5b5-9241-4263-be50-2eb01deea5a1",
          "title": "creaOfferta Test",
          "fullFile": "C:\\Users\\gaspa\\OneDrive\\Documenti\\GitHub\\ingsw-project-2023\\mocha-testing\\backendTest.spec.mjs",
          "file": "\\backendTest.spec.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "test2 astaId inesistente",
              "fullTitle": "creaOfferta Test test2 astaId inesistente",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await OffertaCTRL.creaOfferta(103,\"TestUtente\",3)\n\n .catch((error) => {\n   expect(error.message).to.equal(`Asta  non trovata.`)\n });",
              "err": {},
              "uuid": "680b7ae1-9b57-4fe3-bd82-eee99fcd4be6",
              "parentUUID": "9d2ea5b5-9241-4263-be50-2eb01deea5a1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "680b7ae1-9b57-4fe3-bd82-eee99fcd4be6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b442b1fc-0142-4d37-8d62-99980069b15e",
          "title": "creaOfferta Test",
          "fullFile": "C:\\Users\\gaspa\\OneDrive\\Documenti\\GitHub\\ingsw-project-2023\\mocha-testing\\backendTest.spec.mjs",
          "file": "\\backendTest.spec.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "test3 saldo insufficiente",
              "fullTitle": "creaOfferta Test test3 saldo insufficiente",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await OffertaCTRL.creaOfferta(1400,\"TestUtente\",50)\n\n .catch((error) => {\n   expect(error.message).to.equal(`Saldo insufficiente per l'offerta.`)\n });",
              "err": {},
              "uuid": "4d669c94-0743-4627-a8ab-f3388b91d6ab",
              "parentUUID": "b442b1fc-0142-4d37-8d62-99980069b15e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4d669c94-0743-4627-a8ab-f3388b91d6ab"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "26e8a56a-0a87-431c-be8d-c939958ccbba",
          "title": "creaOfferta Test",
          "fullFile": "C:\\Users\\gaspa\\OneDrive\\Documenti\\GitHub\\ingsw-project-2023\\mocha-testing\\backendTest.spec.mjs",
          "file": "\\backendTest.spec.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "test4 utente non trovato",
              "fullTitle": "creaOfferta Test test4 utente non trovato",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await OffertaCTRL.creaOfferta(1400,\"TestUtente102\",50)\n\n .catch((error) => {\n   expect(error.message).to.equal(\"Utente non trovato.\")\n });",
              "err": {},
              "uuid": "e2c88297-dd83-4b45-a4e9-e6e5f3b9aba6",
              "parentUUID": "26e8a56a-0a87-431c-be8d-c939958ccbba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e2c88297-dd83-4b45-a4e9-e6e5f3b9aba6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ff27a7ac-31a3-4015-9028-c0a42d0d35ca",
          "title": "setTipoUtenete Test",
          "fullFile": "C:\\Users\\gaspa\\OneDrive\\Documenti\\GitHub\\ingsw-project-2023\\mocha-testing\\backendTest.spec.mjs",
          "file": "\\backendTest.spec.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "test1 parametri corretti ",
              "fullTitle": "setTipoUtenete Test test1 parametri corretti ",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await UtenteCTRL.setTipoUtente('compratore','TestUtente@mail.it')\n\n      .catch((message)=>{\n  expect(message).to.equal(\"Successo! Tipo cambiato\")\n      });",
              "err": {},
              "uuid": "f5cff8c6-6a99-4d5f-b0c0-7fe7fedaa6a5",
              "parentUUID": "ff27a7ac-31a3-4015-9028-c0a42d0d35ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test2 parametro tipo incorretto ",
              "fullTitle": "setTipoUtenete Test test2 parametro tipo incorretto ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await UtenteCTRL.setTipoUtente('compratoreM','TestUtente@mail.it')\n\n    .catch((error)=>{\n  expect(error.message).to.equal(\"Tipo utente non valido. Deve essere 'venditore' o 'compratore'.\")\n    });",
              "err": {},
              "uuid": "0ede514a-9fb0-416c-9943-b1d8c3a2e052",
              "parentUUID": "ff27a7ac-31a3-4015-9028-c0a42d0d35ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test3 paramtreo mail incorretto  ",
              "fullTitle": "setTipoUtenete Test test3 paramtreo mail incorretto  ",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await UtenteCTRL.setTipoUtente('compratore','MAILUtente@mail.it')\n\n  .catch((error)=>{\n  expect(error.message).to.equal(\"Errore nel cambiare tipo\")\n  });",
              "err": {},
              "uuid": "6a033652-6926-4401-bc02-443ab1c8bece",
              "parentUUID": "ff27a7ac-31a3-4015-9028-c0a42d0d35ca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f5cff8c6-6a99-4d5f-b0c0-7fe7fedaa6a5",
            "0ede514a-9fb0-416c-9943-b1d8c3a2e052",
            "6a033652-6926-4401-bc02-443ab1c8bece"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f7e3f2d1-4c11-4b98-8b9f-f0897b68d4b7",
          "title": "Login API",
          "fullFile": "C:\\Users\\gaspa\\OneDrive\\Documenti\\GitHub\\ingsw-project-2023\\mocha-testing\\backendTest.spec.mjs",
          "file": "\\backendTest.spec.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "credeziali corrette ritorna access token ",
              "fullTitle": "Login API credeziali corrette ritorna access token ",
              "timedOut": false,
              "duration": 62,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await supertest(app)\n  .post('/login')\n  .send({ email: 'TestUtenteHash@mail.it', password: \"1234\" });  \nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('accessToken');",
              "err": {
                "message": "AssertionError: expected 401 to equal 200",
                "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (file:///C:/Users/gaspa/OneDrive/Documenti/GitHub/ingsw-project-2023/mocha-testing/backendTest.spec.mjs:142:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 200\n"
              },
              "uuid": "d0b3dc9f-871d-47f1-9675-4652e1afbdd5",
              "parentUUID": "f7e3f2d1-4c11-4b98-8b9f-f0897b68d4b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "password non corretta error code 401",
              "fullTitle": "Login API password non corretta error code 401",
              "timedOut": false,
              "duration": 11,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await supertest(app)\n  .post('/login')\n  .send({ email: 'TestUtenteHash@mail.it', password: \"wrongpassword\" });\nexpect(res.status).to.equal(401);\nexpect(res.body.message).to.equal(\"Incorrect password.\");",
              "err": {
                "message": "AssertionError: expected 'Incorrect email.' to equal 'Incorrect password.'",
                "estack": "AssertionError: expected 'Incorrect email.' to equal 'Incorrect password.'\n    at Context.<anonymous> (file:///C:/Users/gaspa/OneDrive/Documenti/GitHub/ingsw-project-2023/mocha-testing/backendTest.spec.mjs:152:33)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Incorrect email.\n+ Incorrect password.\n"
              },
              "uuid": "8e0f1b56-7b1f-4793-845a-05ec8068625d",
              "parentUUID": "f7e3f2d1-4c11-4b98-8b9f-f0897b68d4b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "utente inesistente error code 401",
              "fullTitle": "Login API utente inesistente error code 401",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await supertest(app)\n  .post('/login')\n  .send({ email: 'TestUtenteHh@mail.it', password:\"1234\"});\nexpect(res.status).to.equal(401);\nexpect(res.body.message).to.equal(\"Incorrect email.\");",
              "err": {},
              "uuid": "9de45a7b-a3f0-4b55-8184-fab672768077",
              "parentUUID": "f7e3f2d1-4c11-4b98-8b9f-f0897b68d4b7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9de45a7b-a3f0-4b55-8184-fab672768077"
          ],
          "failures": [
            "d0b3dc9f-871d-47f1-9675-4652e1afbdd5",
            "8e0f1b56-7b1f-4793-845a-05ec8068625d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 84,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}